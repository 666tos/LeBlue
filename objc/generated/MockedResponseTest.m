//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/travis/build/thoutbeckers/LeBlue/LeBlue-java/src/test/java/houtbecke/rs/le/MockedResponseTest.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MockedResponseObject.h"
#include "MockedResponseTest.h"
#include "java/lang/annotation/Annotation.h"
#include "org/junit/Test.h"

@implementation MockedResponseTest

- (void)testMockedResponse {
  MockedResponseObject *mr = new_MockedResponseObject_initWithNSStringArray_([IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
  JreAssert(([mr isForArgumentsWithNSStringArray:nil]), (@"houtbecke/rs/le/MockedResponseTest.java:12 condition failed: assert mr.isForArguments(null);"));
  JreAssert(([mr isForArgumentsWithNSStringArray:[IOSObjectArray newArrayWithLength:0 type:NSString_class_()]]), (@"houtbecke/rs/le/MockedResponseTest.java:13 condition failed: assert mr.isForArguments(new String[0]);"));
  JreAssert(([mr isForArgumentsWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"merp" } count:1 type:NSString_class_()]]), (@"houtbecke/rs/le/MockedResponseTest.java:14 condition failed: assert mr.isForArguments(new String[]{\"merp\"});"));
  [mr forArgumentsWithNSString:@"merp" withInt:0];
  JreAssert(([mr isForArgumentsWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"merp" } count:1 type:NSString_class_()]]), (@"houtbecke/rs/le/MockedResponseTest.java:18 condition failed: assert mr.isForArguments(new String[]{\"merp\"});"));
  JreAssert((![mr isForArgumentsWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"herp" } count:1 type:NSString_class_()]]), (@"houtbecke/rs/le/MockedResponseTest.java:19 condition failed: assert !mr.isForArguments(new String[]{\"herp\"});"));
  JreAssert((![mr isForArgumentsWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()]]), (@"houtbecke/rs/le/MockedResponseTest.java:20 condition failed: assert !mr.isForArguments(new String[]{null});"));
  [mr forArgumentsWithNSString:nil withInt:0];
  JreAssert(([mr isForArgumentsWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ nil } count:1 type:NSString_class_()]]), (@"houtbecke/rs/le/MockedResponseTest.java:23 condition failed: assert mr.isForArguments(new String[]{null});"));
  JreAssert((![mr isForArgumentsWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"merp" } count:1 type:NSString_class_()]]), (@"houtbecke/rs/le/MockedResponseTest.java:24 condition failed: assert !mr.isForArguments(new String[]{\"merp\"});"));
  [mr forArgumentsWithNSString:@"merp" withInt:1];
  IOSObjectArray *merp = [IOSObjectArray newArrayWithObjects:(id[]){ @"merp" } count:1 type:NSString_class_()];
  IOSObjectArray *nullmerp = [IOSObjectArray newArrayWithObjects:(id[]){ nil, @"merp" } count:2 type:NSString_class_()];
  JreAssert((![mr isForArgumentsWithNSStringArray:merp]), (@"houtbecke/rs/le/MockedResponseTest.java:31 condition failed: assert !mr.isForArguments(merp);"));
  JreAssert(([mr isForArgumentsWithNSStringArray:nullmerp]), (@"houtbecke/rs/le/MockedResponseTest.java:32 condition failed: assert mr.isForArguments(nullmerp);"));
  [mr destroyAfterUse];
  JreAssert(([mr isSelfDestroying]), (@"houtbecke/rs/le/MockedResponseTest.java:36 condition failed: assert mr.isSelfDestroying();"));
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  MockedResponseTest_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSObjectArray *)__annotations_testMockedResponse {
  return [IOSObjectArray newArrayWithObjects:(id[]){ create_OrgJunitTest(OrgJunitTest_None_class_(), 0LL) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "testMockedResponse", NULL, "V", 0x1, NULL, NULL },
    { "init", "MockedResponseTest", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _MockedResponseTest = { 2, "MockedResponseTest", "houtbecke.rs.le", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_MockedResponseTest;
}

@end

void MockedResponseTest_init(MockedResponseTest *self) {
  NSObject_init(self);
}

MockedResponseTest *new_MockedResponseTest_init() {
  J2OBJC_NEW_IMPL(MockedResponseTest, init)
}

MockedResponseTest *create_MockedResponseTest_init() {
  J2OBJC_CREATE_IMPL(MockedResponseTest, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(MockedResponseTest)
